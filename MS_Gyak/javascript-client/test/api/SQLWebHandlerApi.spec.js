/*
 * Homework server
 * This is a simple server for my homework. It can make request towards a PSQL database, and get full tables of data from it.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: szmgepesz@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.12
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.HomeworkServer);
  }
}(this, function(expect, HomeworkServer) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new HomeworkServer.SQLWebHandlerApi();
  });

  describe('(package)', function() {
    describe('SQLWebHandlerApi', function() {
      describe('createTable', function() {
        it('should call createTable successfully', function(done) {
          // TODO: uncomment, update parameter values for createTable call
          /*
          var tableType = 56;

          instance.createTable(tableType, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getDataPointDescriptionTable', function() {
        it('should call getDataPointDescriptionTable successfully', function(done) {
          // TODO: uncomment getDataPointDescriptionTable call and complete the assertions
          /*

          instance.getDataPointDescriptionTable(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(HomeworkServer.DataPointDescription);
              expect(data.ID).to.be.a('number');
              expect(data.ID).to.be("0");
              expect(data.name).to.be.a('string');
              expect(data.name).to.be("");
              expect(data.title).to.be.a('string');
              expect(data.title).to.be("");
              expect(data.max).to.be.a('number');
              expect(data.max).to.be("0");
              expect(data.min).to.be.a('number');
              expect(data.min).to.be("0");
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getDataPointTable', function() {
        it('should call getDataPointTable successfully', function(done) {
          // TODO: uncomment, update parameter values for getDataPointTable call and complete the assertions
          /*
          var tableType = 56;

          instance.getDataPointTable(tableType, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(HomeworkServer.DataPoint);
              expect(data.ID).to.be.a('number');
              expect(data.ID).to.be("0");
              expect(data.timestamp).to.be.a(Date);
              expect(data.timestamp).to.be(new Date());
              expect(data.dataPointDescription).to.be.a(Object);
              expect(data.dataPointDescription).to.be();
              expect(data.module).to.be.a(Object);
              expect(data.module).to.be();
              expect(data.value).to.be.a('number');
              expect(data.value).to.be(0.0);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getModule', function() {
        it('should call getModule successfully', function(done) {
          // TODO: uncomment getModule call and complete the assertions
          /*

          instance.getModule(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(HomeworkServer.Module);
              expect(data.ID).to.be.a('number');
              expect(data.ID).to.be("0");
              expect(data.name).to.be.a('string');
              expect(data.name).to.be("");
              expect(data.title).to.be.a('string');
              expect(data.title).to.be("");
              expect(data.max).to.be.a('number');
              expect(data.max).to.be(0);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
