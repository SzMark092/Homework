/*
 * Homework server
 * This is a simple server for my homework. It can make request towards a PSQL database, and get full tables of data from it.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: szmgepesz@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.12
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/DataPoint', 'model/DataPointDescription', 'model/Module'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/DataPoint'), require('../model/DataPointDescription'), require('../model/Module'));
  } else {
    // Browser globals (root is window)
    if (!root.HomeworkServer) {
      root.HomeworkServer = {};
    }
    root.HomeworkServer.SQLWebHandlerApi = factory(root.HomeworkServer.ApiClient, root.HomeworkServer.DataPoint, root.HomeworkServer.DataPointDescription, root.HomeworkServer.Module);
  }
}(this, function(ApiClient, DataPoint, DataPointDescription, Module) {
  'use strict';

  /**
   * SQLWebHandler service.
   * @module api/SQLWebHandlerApi
   * @version 2.0.0
   */

  /**
   * Constructs a new SQLWebHandlerApi. 
   * @alias module:api/SQLWebHandlerApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createTable operation.
     * @callback module:api/SQLWebHandlerApi~createTableCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a table with the given code.
     * 
     * @param {Number} tableType Type of the table that have to be created.
     * @param {module:api/SQLWebHandlerApi~createTableCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.createTable = function(tableType, callback) {
      var postBody = null;

      // verify the required parameter 'tableType' is set
      if (tableType === undefined || tableType === null) {
        throw new Error("Missing the required parameter 'tableType' when calling createTable");
      }


      var pathParams = {
      };
      var queryParams = {
        'TableType': tableType,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/CreateTable', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDataPointDescriptionTable operation.
     * @callback module:api/SQLWebHandlerApi~getDataPointDescriptionTableCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DataPointDescription>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the specified table from the SQL server.
     * 
     * @param {module:api/SQLWebHandlerApi~getDataPointDescriptionTableCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DataPointDescription>}
     */
    this.getDataPointDescriptionTable = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [DataPointDescription];

      return this.apiClient.callApi(
        '/GetDataPointDescriptionTable', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDataPointTable operation.
     * @callback module:api/SQLWebHandlerApi~getDataPointTableCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DataPoint>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the specified table from the SQL server.
     * 
     * @param {Number} tableType Type of the table that have to be created.
     * @param {module:api/SQLWebHandlerApi~getDataPointTableCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DataPoint>}
     */
    this.getDataPointTable = function(tableType, callback) {
      var postBody = null;

      // verify the required parameter 'tableType' is set
      if (tableType === undefined || tableType === null) {
        throw new Error("Missing the required parameter 'tableType' when calling getDataPointTable");
      }


      var pathParams = {
      };
      var queryParams = {
        'TableType': tableType,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [DataPoint];

      return this.apiClient.callApi(
        '/GetDataPointTable', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getModule operation.
     * @callback module:api/SQLWebHandlerApi~getModuleCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Module>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the specified table from the SQL server.
     * 
     * @param {module:api/SQLWebHandlerApi~getModuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Module>}
     */
    this.getModule = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Module];

      return this.apiClient.callApi(
        '/GetModuleTable', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
