// Code generated by go-swagger; DO NOT EDIT.

package sql_web_handler

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetModuleHandlerFunc turns a function with the right signature into a get module handler
type GetModuleHandlerFunc func(GetModuleParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetModuleHandlerFunc) Handle(params GetModuleParams) middleware.Responder {
	return fn(params)
}

// GetModuleHandler interface for that can handle valid get module params
type GetModuleHandler interface {
	Handle(GetModuleParams) middleware.Responder
}

// NewGetModule creates a new http.Handler for the get module operation
func NewGetModule(ctx *middleware.Context, handler GetModuleHandler) *GetModule {
	return &GetModule{Context: ctx, Handler: handler}
}

/*GetModule swagger:route GET /GetModuleTable SQLWebHandler getModule

Get the specified table from the SQL server.

*/
type GetModule struct {
	Context *middleware.Context
	Handler GetModuleHandler
}

func (o *GetModule) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetModuleParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
