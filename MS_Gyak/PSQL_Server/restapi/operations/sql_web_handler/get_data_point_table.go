// Code generated by go-swagger; DO NOT EDIT.

package sql_web_handler

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetDataPointTableHandlerFunc turns a function with the right signature into a get data point table handler
type GetDataPointTableHandlerFunc func(GetDataPointTableParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetDataPointTableHandlerFunc) Handle(params GetDataPointTableParams) middleware.Responder {
	return fn(params)
}

// GetDataPointTableHandler interface for that can handle valid get data point table params
type GetDataPointTableHandler interface {
	Handle(GetDataPointTableParams) middleware.Responder
}

// NewGetDataPointTable creates a new http.Handler for the get data point table operation
func NewGetDataPointTable(ctx *middleware.Context, handler GetDataPointTableHandler) *GetDataPointTable {
	return &GetDataPointTable{Context: ctx, Handler: handler}
}

/*GetDataPointTable swagger:route GET /GetDataPointTable SQLWebHandler getDataPointTable

Get the specified table from the SQL server.

*/
type GetDataPointTable struct {
	Context *middleware.Context
	Handler GetDataPointTableHandler
}

func (o *GetDataPointTable) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetDataPointTableParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
