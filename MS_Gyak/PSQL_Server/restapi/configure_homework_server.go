// Code generated by go-swagger; DO NOT EDIT.

package restapi

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"

	"github.com/Stratoscale/swagger/query"
	"github.com/go-openapi/errors"
	"github.com/go-openapi/loads"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"

	"github.com/SzMark092/MS_Gyak/PSQL_Server/restapi/operations"
	"github.com/SzMark092/MS_Gyak/PSQL_Server/restapi/operations/sql_web_handler"

	models "github.com/SzMark092/MS_Gyak/PSQL_Server/models"
)

type contextKey string

const AuthKey contextKey = "Auth"

//go:generate mockery -name SQLWebHandlerAPI -inpkg

// SQLWebHandlerAPI
type SQLWebHandlerAPI interface {
	CreateTable(ctx context.Context, params sql_web_handler.CreateTableParams) middleware.Responder
	GetTable(ctx context.Context, params sql_web_handler.GetTableParams) middleware.Responder
	GetHomePage(ctx context.Context, params sql_web_handler.GetHomePageParams) middleware.Responder
}

// Config is configuration for Handler
type Config struct {
	SQLWebHandlerAPI
	Logger func(string, ...interface{})
	// InnerMiddleware is for the handler executors. These do not apply to the swagger.json document.
	// The middleware executes after routing but before authentication, binding and validation
	InnerMiddleware func(http.Handler) http.Handler

	// Authorizer is used to authorize a request after the Auth function was called using the "Auth*" functions
	// and the principal was stored in the context in the "AuthKey" context value.
	Authorizer func(*http.Request) error
}

// Handler returns an http.Handler given the handler configuration
// It mounts all the business logic implementers in the right routing.
func Handler(c Config) (http.Handler, error) {
	spec, err := loads.Analyzed(swaggerCopy(SwaggerJSON), "")
	if err != nil {
		return nil, fmt.Errorf("analyze swagger: %v", err)
	}
	api := operations.NewHomeworkServerAPI(spec)
	api.ServeError = errors.ServeError
	api.Logger = c.Logger

	api.JSONConsumer = runtime.JSONConsumer()
	api.JSONProducer = runtime.JSONProducer()
	api.HTMLProducer = runtime.ProducerFunc(func(w io.Writer, data interface{}) error {
		return errors.NotImplemented("html producer has not yet been implemented")
	})
	api.SQLWebHandlerCreateTableHandler = sql_web_handler.CreateTableHandlerFunc(func(params sql_web_handler.CreateTableParams) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		return c.SQLWebHandlerAPI.CreateTable(ctx, params)
	})
	api.SQLWebHandlerGetTableHandler = sql_web_handler.GetTableHandlerFunc(func(params sql_web_handler.GetTableParams) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		return c.SQLWebHandlerAPI.GetTable(ctx, params)
	})
	api.SQLWebHandlerGetHomePageHandler = sql_web_handler.GetHomePageHandlerFunc(func(params sql_web_handler.GetHomePageParams) middleware.Responder {
		ctx := params.HTTPRequest.Context()
		return c.SQLWebHandlerAPI.GetHomePage(ctx, params)
	})
	api.ServerShutdown = func() {}
	return api.Serve(c.InnerMiddleware), nil
}

// Query parse functions for all the models
// Those can be used to extract database query from the http path's query string
var (
	DataPointQueryParse            = query.MustNewBuilder(&query.Config{Model: models.DataPoint{}}).ParseRequest
	DataPointDescriptionQueryParse = query.MustNewBuilder(&query.Config{Model: models.DataPointDescription{}}).ParseRequest
	ModuleQueryParse               = query.MustNewBuilder(&query.Config{Model: models.Module{}}).ParseRequest
)

// swaggerCopy copies the swagger json to prevent data races in runtime
func swaggerCopy(orig json.RawMessage) json.RawMessage {
	c := make(json.RawMessage, len(orig))
	copy(c, orig)
	return c
}

// authorizer is a helper function to implement the runtime.Authorizer interface.
type authorizer func(*http.Request) error

func (a authorizer) Authorize(req *http.Request, principal interface{}) error {
	if a == nil {
		return nil
	}
	ctx := storeAuth(req.Context(), principal)
	return a(req.WithContext(ctx))
}

func storeAuth(ctx context.Context, principal interface{}) context.Context {
	return context.WithValue(ctx, AuthKey, principal)
}
